// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/container.h"
#include <Rcpp.h>

using namespace Rcpp;

// deque_create
XPtr<deque> deque_create();
RcppExport SEXP container_deque_create() {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    __result = Rcpp::wrap(deque_create());
    return __result;
END_RCPP
}
// deque_release
void deque_release(XPtr<deque> x);
RcppExport SEXP container_deque_release(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<deque> >::type x(xSEXP);
    deque_release(x);
    return R_NilValue;
END_RCPP
}
// deque_empty
bool deque_empty(XPtr<deque> x);
RcppExport SEXP container_deque_empty(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<deque> >::type x(xSEXP);
    __result = Rcpp::wrap(deque_empty(x));
    return __result;
END_RCPP
}
// deque_size
R_xlen_t deque_size(XPtr<deque> x);
RcppExport SEXP container_deque_size(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<deque> >::type x(xSEXP);
    __result = Rcpp::wrap(deque_size(x));
    return __result;
END_RCPP
}
// deque_push_back
void deque_push_back(XPtr<deque> x, SEXP value);
RcppExport SEXP container_deque_push_back(SEXP xSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<deque> >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type value(valueSEXP);
    deque_push_back(x, value);
    return R_NilValue;
END_RCPP
}
// deque_push_front
void deque_push_front(XPtr<deque> x, SEXP value);
RcppExport SEXP container_deque_push_front(SEXP xSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<deque> >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type value(valueSEXP);
    deque_push_front(x, value);
    return R_NilValue;
END_RCPP
}
// deque_pop_back
void deque_pop_back(XPtr<deque> x);
RcppExport SEXP container_deque_pop_back(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<deque> >::type x(xSEXP);
    deque_pop_back(x);
    return R_NilValue;
END_RCPP
}
// deque_pop_front
void deque_pop_front(XPtr<deque> x);
RcppExport SEXP container_deque_pop_front(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<deque> >::type x(xSEXP);
    deque_pop_front(x);
    return R_NilValue;
END_RCPP
}
// deque_back
SEXP deque_back(XPtr<deque> x);
RcppExport SEXP container_deque_back(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<deque> >::type x(xSEXP);
    __result = Rcpp::wrap(deque_back(x));
    return __result;
END_RCPP
}
// deque_front
SEXP deque_front(XPtr<deque> x);
RcppExport SEXP container_deque_front(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<deque> >::type x(xSEXP);
    __result = Rcpp::wrap(deque_front(x));
    return __result;
END_RCPP
}
// deque_at
SEXP deque_at(XPtr<deque> x, int i);
RcppExport SEXP container_deque_at(SEXP xSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<deque> >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    __result = Rcpp::wrap(deque_at(x, i));
    return __result;
END_RCPP
}
// deque_as_list
List deque_as_list(XPtr<deque> x);
RcppExport SEXP container_deque_as_list(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<deque> >::type x(xSEXP);
    __result = Rcpp::wrap(deque_as_list(x));
    return __result;
END_RCPP
}
// priority_queue_double_create
XPtr<priority_queue_double> priority_queue_double_create();
RcppExport SEXP container_priority_queue_double_create() {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    __result = Rcpp::wrap(priority_queue_double_create());
    return __result;
END_RCPP
}
// priority_queue_double_release
void priority_queue_double_release(XPtr<priority_queue_double> x);
RcppExport SEXP container_priority_queue_double_release(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<priority_queue_double> >::type x(xSEXP);
    priority_queue_double_release(x);
    return R_NilValue;
END_RCPP
}
// priority_queue_double_empty
bool priority_queue_double_empty(XPtr<priority_queue_double> x);
RcppExport SEXP container_priority_queue_double_empty(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<priority_queue_double> >::type x(xSEXP);
    __result = Rcpp::wrap(priority_queue_double_empty(x));
    return __result;
END_RCPP
}
// priority_queue_double_size
R_xlen_t priority_queue_double_size(XPtr<priority_queue_double> x);
RcppExport SEXP container_priority_queue_double_size(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<priority_queue_double> >::type x(xSEXP);
    __result = Rcpp::wrap(priority_queue_double_size(x));
    return __result;
END_RCPP
}
// priority_queue_double_push
void priority_queue_double_push(XPtr<priority_queue_double> x, double value);
RcppExport SEXP container_priority_queue_double_push(SEXP xSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<priority_queue_double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    priority_queue_double_push(x, value);
    return R_NilValue;
END_RCPP
}
// priority_queue_double_pop
void priority_queue_double_pop(XPtr<priority_queue_double> x);
RcppExport SEXP container_priority_queue_double_pop(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<priority_queue_double> >::type x(xSEXP);
    priority_queue_double_pop(x);
    return R_NilValue;
END_RCPP
}
// priority_queue_double_top
double priority_queue_double_top(XPtr<priority_queue_double> x);
RcppExport SEXP container_priority_queue_double_top(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<priority_queue_double> >::type x(xSEXP);
    __result = Rcpp::wrap(priority_queue_double_top(x));
    return __result;
END_RCPP
}
// priority_queue_int_create
XPtr<priority_queue_int> priority_queue_int_create();
RcppExport SEXP container_priority_queue_int_create() {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    __result = Rcpp::wrap(priority_queue_int_create());
    return __result;
END_RCPP
}
// priority_queue_int_release
void priority_queue_int_release(XPtr<priority_queue_int> x);
RcppExport SEXP container_priority_queue_int_release(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<priority_queue_int> >::type x(xSEXP);
    priority_queue_int_release(x);
    return R_NilValue;
END_RCPP
}
// priority_queue_int_empty
bool priority_queue_int_empty(XPtr<priority_queue_int> x);
RcppExport SEXP container_priority_queue_int_empty(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<priority_queue_int> >::type x(xSEXP);
    __result = Rcpp::wrap(priority_queue_int_empty(x));
    return __result;
END_RCPP
}
// priority_queue_int_size
R_xlen_t priority_queue_int_size(XPtr<priority_queue_int> x);
RcppExport SEXP container_priority_queue_int_size(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<priority_queue_int> >::type x(xSEXP);
    __result = Rcpp::wrap(priority_queue_int_size(x));
    return __result;
END_RCPP
}
// priority_queue_int_push
void priority_queue_int_push(XPtr<priority_queue_int> x, int value);
RcppExport SEXP container_priority_queue_int_push(SEXP xSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<priority_queue_int> >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type value(valueSEXP);
    priority_queue_int_push(x, value);
    return R_NilValue;
END_RCPP
}
// priority_queue_int_pop
void priority_queue_int_pop(XPtr<priority_queue_int> x);
RcppExport SEXP container_priority_queue_int_pop(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<priority_queue_int> >::type x(xSEXP);
    priority_queue_int_pop(x);
    return R_NilValue;
END_RCPP
}
// priority_queue_int_top
int priority_queue_int_top(XPtr<priority_queue_int> x);
RcppExport SEXP container_priority_queue_int_top(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<priority_queue_int> >::type x(xSEXP);
    __result = Rcpp::wrap(priority_queue_int_top(x));
    return __result;
END_RCPP
}
// queue_create
XPtr<queue> queue_create();
RcppExport SEXP container_queue_create() {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    __result = Rcpp::wrap(queue_create());
    return __result;
END_RCPP
}
// queue_release
void queue_release(XPtr<queue> x);
RcppExport SEXP container_queue_release(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<queue> >::type x(xSEXP);
    queue_release(x);
    return R_NilValue;
END_RCPP
}
// queue_empty
bool queue_empty(XPtr<queue> x);
RcppExport SEXP container_queue_empty(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<queue> >::type x(xSEXP);
    __result = Rcpp::wrap(queue_empty(x));
    return __result;
END_RCPP
}
// queue_size
R_xlen_t queue_size(XPtr<queue> x);
RcppExport SEXP container_queue_size(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<queue> >::type x(xSEXP);
    __result = Rcpp::wrap(queue_size(x));
    return __result;
END_RCPP
}
// queue_push
void queue_push(XPtr<queue> x, SEXP value);
RcppExport SEXP container_queue_push(SEXP xSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<queue> >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type value(valueSEXP);
    queue_push(x, value);
    return R_NilValue;
END_RCPP
}
// queue_pop
void queue_pop(XPtr<queue> x);
RcppExport SEXP container_queue_pop(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<queue> >::type x(xSEXP);
    queue_pop(x);
    return R_NilValue;
END_RCPP
}
// queue_back
SEXP queue_back(XPtr<queue> x);
RcppExport SEXP container_queue_back(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<queue> >::type x(xSEXP);
    __result = Rcpp::wrap(queue_back(x));
    return __result;
END_RCPP
}
// queue_front
SEXP queue_front(XPtr<queue> x);
RcppExport SEXP container_queue_front(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<queue> >::type x(xSEXP);
    __result = Rcpp::wrap(queue_front(x));
    return __result;
END_RCPP
}
// stack_create
XPtr<stack> stack_create();
RcppExport SEXP container_stack_create() {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    __result = Rcpp::wrap(stack_create());
    return __result;
END_RCPP
}
// stack_release
void stack_release(XPtr<stack> x);
RcppExport SEXP container_stack_release(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<stack> >::type x(xSEXP);
    stack_release(x);
    return R_NilValue;
END_RCPP
}
// stack_empty
bool stack_empty(XPtr<stack> x);
RcppExport SEXP container_stack_empty(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<stack> >::type x(xSEXP);
    __result = Rcpp::wrap(stack_empty(x));
    return __result;
END_RCPP
}
// stack_size
R_xlen_t stack_size(XPtr<stack> x);
RcppExport SEXP container_stack_size(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<stack> >::type x(xSEXP);
    __result = Rcpp::wrap(stack_size(x));
    return __result;
END_RCPP
}
// stack_push
void stack_push(XPtr<stack> x, SEXP value);
RcppExport SEXP container_stack_push(SEXP xSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<stack> >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type value(valueSEXP);
    stack_push(x, value);
    return R_NilValue;
END_RCPP
}
// stack_pop
void stack_pop(XPtr<stack> x);
RcppExport SEXP container_stack_pop(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<stack> >::type x(xSEXP);
    stack_pop(x);
    return R_NilValue;
END_RCPP
}
// stack_top
SEXP stack_top(XPtr<stack> x);
RcppExport SEXP container_stack_top(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<stack> >::type x(xSEXP);
    __result = Rcpp::wrap(stack_top(x));
    return __result;
END_RCPP
}
